# +-------------------+
# | System Functions |
# +-----------------+

# Menu for shutting down, rebooting or suspending the system
sys() {
ERROR=0
case "$1" in
    stop)
        echo $"Shutting Down System"
        systemctl poweroff
        ;;
	reboot)
    echo $"Rebooting the System"
        systemctl reboot
        ;;
	suspend)
    echo $"Suspending System"
        systemctl suspend
        ;;
            
 *)
    echo $"Usage: $0 {stop|reboot|suspend}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}

# Menu with various options to update the System
sysupdt() {
ERROR=0
case "$1" in
    system)
        sudo pacman -Syu
        ;;
    full)
        sudo pacman -Syyu
        ;;
    pkgs)
        yay -Syu --noconfirm 
        ;;  
    aur)
        yay -Sua --noconfirm
        ;;  
    unlock)
        sudo rm /var/lib/pacman/db.lck
        ;;  
    cleanup)
        sudo pacman -Rns $(pacman -Qtdq)
        ;;  
 *)
    echo $"Usage: $0 {system|full|pkgs|aur|unlock|cleanup}"
    tput setaf 1; echo $"$0 system: {System Update}"
    tput setaf 1; echo $"$0 full: {Full System Update (includes mirror updates)}"
    tput setaf 1; echo $"$0 pkgs:{update standard pkgs and AUR pkgs}"
    tput setaf 1; echo $"$0 aur: {update only AUR pkgs}"
    tput setaf 1; echo $"$0 unlock: {remove pacman lock}"
    tput setaf 1; echo $"$0 cleanup: {remove orphaned packages}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}

# Measures the speed of openning a new prompt
#promptspeed() {
#    for i in $(seq 1 10); do /usr/bin/time zsh -i -c exit; done
#}

# Generate SSH key
ssh-create() {
if [ ! -z "$1" ];
then
    ssh-keygen -f $HOME/.ssh/$1 -t rsa -N '' -C "$1"
    chmod 700 $HOME/.ssh/$1*
fi
}

# Command History
historystat() {
    history 0 | awk '{print $2}' | sort | uniq -c | sort -n -r | head
}

# +---------+
# | Display |
# +--------+

# Get Screen Resolution
screenres() {
    [ ! -z $1 ] && xrandr --current | grep '*' | awk '{print $1}' | line $1
}

# Screenshot
screenshot () {
    local DIR="${HOME}/Documents/images/screenshots"
    local DATE="$(date +%Y%m%d-%H%M%S)"
    local NAME="${DIR}/screenshot-${DATE}.png"
    local LOG="${DIR}/screenshots.log"

    # Check if the dir to store the screenshots exists, else create it:
    if [ ! -d "${DIR}" ]; then mkdir -p "${DIR}"; fi

    if [ ! -f "${LOG}" ]; then touch "${LOG}"; fi

    # Screenshot a selected window
    if [ "$1" = "win" ]; then import -format png "${NAME}"; fi

    # Screenshot the entire screen
    if [ "$1" = "scr" ]; then import -format png -window root "${NAME}"; fi

    # Screenshot a selected area if [ "$1" = "area" ]; then import -format png "${NAME}"; fi

    if [[ $# = 0 ]]; then
        # Display a warning if no area defined
        echo "No screenshot area has been specified. Please choose between: win, scr, area. Screenshot not taken."
        echo "${DATE}: No screenshot area has been defined. Screenshot not taken." >> "${LOG}"
    else
        # Save the screenshot in the directory and edit the log
        echo "${NAME}" >> "${LOG}"
    fi
}

# Screensaver [Matrix]
matrix () {
    local lines=$(tput lines)
    cols=$(tput cols)

    awkscript='
    {
        letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*()"
        lines=$1
        random_col=$3
        c=$4
        letter=substr(letters,c,1)
        cols[random_col]=0;
        for (col in cols) {
            line=cols[col];
            cols[col]=cols[col]+1;
            printf "\033[%s;%sH\033[2;32m%s", line, col, letter;
            printf "\033[%s;%sH\033[1;37m%s\033[0;0H", cols[col], col, letter;
            if (cols[col] >= lines) {
                cols[col]=0;
            }
    }
}
'

echo -e "\e[1;40m"
clear

while :; do
    echo $lines $cols $(( $RANDOM % $cols)) $(( $RANDOM % 72 ))
    sleep 0.05
done | awk "$awkscript"
}

# +--------------------+
# | Directory Creation |
# +-------------------+

# Makes a directory with the given name and cd's into it
mkcd() {
    dir="$*";
    mkdir -p "$dir" && cd "$dir";
}

# Copies the choosen directory and makes another one with the given name
# and the same content
mkcp() {
    dir="$2"
    tmp="$2"; tmp="${tmp: -1}"
    [ "$tmp" != "/" ] && dir="$(dirname "$2")"
    [ -d "$dir" ] ||
    mkdir -p "$dir" &&
    cp -r "$@"
}

# Moves the current directory and its content and makes
# another one with the given name
mkmv() {
    dir="$2"
    tmp="$2"; tmp="${tmp: -1}"
    [ "$tmp" != "/" ] && dir="$(dirname "$2")"
    [ -d "$dir" ] ||
    mkdir -p "$dir" &&
    mv "$@"
}

# +-----------------------------+
# | File Extraction/Compression |
# +----------------------------+

# Extraction
extract() {
    if [ -f $1 ] ; then
        ex $1
    else
        echo "'$1' is not a valid file"
    fi
}

mkextract() {
    for file in "$@"
    do
        if [ -f $file ] ; then
            local filename=${file%\.*}
            mkdir -p $filename
            cp $file $filename
            cd $filename
            ex $file
            rm -f $file
            cd -
        else
            echo "'$1' is not a valid file"
        fi
    done
}

ex() {
    case $1 in
        *.tar.bz2)  tar xjf $1      ;;
        *.tar.gz)   tar xzf $1      ;;
        *.bz2)      bunzip2 $1      ;;
        *.gz)       gunzip $1       ;;
        *.tar)      tar xf $1       ;;
        *.tbz2)     tar xjf $1      ;;
        *.tgz)      tar xzf $1      ;;
        *.zip)      unzip $1        ;;
        *.7z)       7z x $1         ;; # require p7zip
        *.rar)      7z x $1         ;; # require p7zip
        *.iso)      7z x $1         ;; # require p7zip
        *.Z)        uncompress $1   ;;
        *)          echo "'$1' cannot be extracted" ;;
    esac
}

# Compression
compress() {
    tar cvzf $1.tar.gz $1
}

function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# +-----------------------------+
# | Image Edition 		|
# +-----------------------------+

# Get the selected img size
imgsize() {
    local width=$(identify -format "%w" "$1")> /dev/null
    local height=$(identify -format "%h" "$1")> /dev/null

    echo -e "Size of $1: $width*$height"
}

# Resize the selected img
imgresize() {
    local filename=${1%\.*}
    local extension="${1##*.}"
    local separator="_"
    if [ ! -z $3 ]; then
        local finalName="$filename.$extension"
    else
        local finalName="$filename$separator$2.$extension"
    fi
    convert $1 -quality 100 -resize $2 $finalName
    echo "$finalName resized to $2"
}

# Resize imgs in batch
imgresizeall() {
    for f in *.${1}; do
        if [ ! -z $3 ]; then
            imgresize "$f" ${2} t
        else
            imgresize "$f" ${2}
        fi
    done
}

# Optimize img
imgoptimize() {
    local filename=${1%\.*}
    local extension="${1##*.}"
    local separator="_"
    local suffix="optimized"
    local finalName="$filename$separator$suffix.$extension"
    convert $1 -strip -interlace Plane -quality 85% $finalName
    echo "$finalName created"
}

Imgoptimize() {
    local filename=${1%\.*}
    local extension="${1##*.}"
    local separator="_"
    local suffix="optimized"
    local convert $1 -strip -interlace Plane -quality 85% $1
    echo "$1 created"
}

# Optmize imgs in batch
imgoptimizeall() {
    for f in *.${1}; do
        imgoptimize "$f"
    done
}

Imgoptimizeall() {
    for f in *.${1}; do
        Imgoptimize "$f"
    done
}

# Conver img to jpg
imgconvjpg() {
    if [ ! -z "$1" ];
    then
        local filename=${1%\.*}
        magick convert $1 "${filename}.jpg"
    else
        echo -e "You need to add an image to convert as param!"
    fi
}

# Conver img to png
imgconvpng() {
    if [ ! -z "$1" ];
    then
        local filename=${1%\.*}
        magick convert $1 "${filename}.png"
    else
        echo -e "You need to add an image to convert as param!"
    fi
}

# Convert img to webp
imgwebp() {
    local IMG_EXT="jpg"
    if [ ! -z $1 ];
    then
        IMG_EXT=$1
    fi
    for F in *.$IMG_EXT; do cwebp -q 100 $F -o `basename ${F%.$IMG_EXT}`.webp; done
}

# +----------------+
# | Video Edition  |
# +----------------+

gifify() {
  if [[ -n "$1" ]]; then
	if [[ $2 == '--good' ]]; then
	  ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
	  time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > "$1.gif"
	  rm out-static*.png
	else
	  ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$1.gif"
	fi
  else
	echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# turn that video into webm.
# brew reinstall ffmpeg --with-libvpx
webmify(){
	ffmpeg -i "$1" -vcodec libvpx -acodec libvorbis -isync -copyts -aq 80 -threads 3 -qmax 30 -y "$2" "$1.webm"
}

# +----------------+
# | youtube-viewer |
# +---------------+

# Channel Search
#yv-ch() {
#    cat .yt-channels | sed -n "${1},${1}p" | awk -F- '{print $2}' | xargs youtube-viewer -sc
#}

# Playlist Search
#yv-pl() {
#    cat .yt-channels | sed -n "${1},${1}p" | awk -F- '{print $3}' | xargs youtube-viewer -up
#}

# Get the designated number of recent videos from Subscriptions
# (limited to 50, attention, this operation takes some time)
#yv-rc() {
#    youtube-viewer -SV -results=${1}
#}

#yv-chsc() {
#	grep "${1}" .yt-channels 
#}

ytv() {
ERROR=0
case "$1" in
    ch)
        cat .yt-channels | sed -n "${2},${2}p" | awk -F- '{print $2}' | xargs youtube-viewer -sc
        ;;
    pl)
        cat .yt-channels | sed -n "${2},${2}p" | awk -F- '{print $3}' | xargs youtube-viewer -up
        ;;
    rc)
        youtube-viewer -SV -results="${2}"
        ;;  
    schls)
        grep "${2}" .yt-channels 
        ;;
    chls)
       tput setaf 1; cat .yt-channels
      ;;
 *)
    echo $"Usage: $0 {ch|pl|rc|schls|chls}"
    echo $"Usage: $0 {Provide an int arg to the first three options}"
    tput setaf 1; echo $ $0 "ch: {Display Videos from the choosen channel}"
    tput setaf 1; echo $ $0 "pl: {Display playlists from the choosen channel)}"
    tput setaf 1; echo $ $0 "rc: {Display the choosen amount of recent videos(limit 50!)}"
    tput setaf 1; echo $ $0 "schls: {Search my youtube video list}"
    tput setaf 1; echo $ $0 "chls: {display my youtube video list (large list!)}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}

# Download single video
ydl() {
    if [ ! -z $1 ];
    then
        youtube-dl -f 22 "$1"
    else
        echo "You need to specify a video url as argument"
    fi
}

# Download playlist
ydlp() {
    if [ ! -z $1 ];
    then
        youtube-dl -o "%(autonumber)s-%(title)s.%(ext)s" "$1"
    else
        echo "You need to specify a playlist url as argument"
    fi
}

ytaud() {
ERROR=0
case "$1" in
    best)
        youtube-dl --extract-audio --audio-format aac "$2"
        ;;
    aac)
        youtube-dl --extract-audio --audio-format aac "$2"
        ;;
    flac)
        youtube-dl --extract-audio --audio-format aac "$2"
        ;;  
    m4a)
        youtube-dl --extract-audio --audio-format aac "$2"
        ;;  
    mp3)
        youtube-dl --extract-audio --audio-format aac "$2"
        ;;  
    opus)
        youtube-dl --extract-audio --audio-format aac "$2"
        ;;  
    vorbis)
        youtube-dl --extract-audio --audio-format aac "$2"
        ;;  
    wav)
        youtube-dl --extract-audio --audio-format aac "$2"
        ;;      
 *)
    echo $"youtube-dl: $0 {best|aac|flac|m4a|mp3|opus|vorbis|wav}"
    echo $"Usage: $0 {Please provide a link after the choosen option}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}

# +----------------+
# | MariaDB        |
# +----------------+

mdb() {
ERROR=0
case "$1" in
    start)
        echo $"Maria DB service starting"
        systemctl start mariadb
        ;;
	stop)
        echo $"Maria DB service stoping"
        systemctl stop mariadb
        ;;
	restart)
    echo $"MariaDB Service restarting"
    systemctl restart mariadb
        ;;
    status)
    echo $"MariaDB Service Status"
    systemctl status mariadb
        ;;
            
 *)
    echo $"MariaDB: $0 {start|stop|restarting|status}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}

# +----------------+
# | Tomcat         |
# +----------------+

tc() {
ERROR=0
case "$1" in
    start)
        echo $"Starting Tomcat"
        sudo sh $CATALINA_HOME/bin/startup.sh
        ;;
	stop)
        echo $"Stopping Tomcat"
        sudo sh $CATALINA_HOME/bin/shutdown.sh
        ;;
	restart)
        sudo sh $CATALINA_HOME/bin/shutdown.sh
        sudo sh $CATALINA_HOME/bin/startup.sh
        ;;
            
	logs)
        sudo tail -f $CATALINA_HOME/logs/catalina.out
        ;;
 *)
    echo $"Tomcat: $0 {start|stop|restart|logs}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}


# +----------------+
# | Doom Emacs     |
# +----------------+

doom() {
ERROR=0
case "$1" in
    sync)
        ~/.emacs.d/bin/doom sync
        ;;
    upgrade)
        ~/.emacs.d/bin/doom upgrade
        ;;
    doctor)
        ~/.emacs.d/bin/doom doctor
        ;;
    env)
        ~/.emacs.d/bin/doom env
        ;;
    build)
        ~/.emacs.d/bin/doom build
        ;;
 *)
    echo $"Usage: $0 {sync, upgrade, doctor, env, build}"
    tput setaf 1; echo $"$0 sync: {synchronize your private config with Doom}"
    tput setaf 1; echo $"$0 upgrade: {update Doom to the latest release & all installed packages}"
    tput setaf 1; echo $"$0 doctor:{diagnose common issues with your system and config}"
    tput setaf 1; echo $"$0 env: {dump a snapshot of your shell environment to a file that Doom will load at startup}"
    tput setaf 1; echo $"$0 build: {recompile all installed packages}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}

# +----------------+
# | Docker         |
# +----------------+
dckr() {
ERROR=0
case "$1" in
    search)
        docker search ${2}
        ;;
    pull)
        docker pull ${2}
        ;;
    images)
        docker images
        ;;
    run)
        docker run -d ${2}
        ;;
    containers)
       docker ps
      ;;
    build)
        docker build ${2}
        ;;
    delete)
       docker container rm ${2}
     ;;
 *)
    echo $"Usage: $0 {search|pull|images|run|containers|build|delete}"
    echo $"Usage: $0 {For search|pull|run provide an <image-name>}"
    echo $"Usage: $0 {For build provide an <dockerfile-location>}"
    echo $"Usage: $0 {For delete provide an <container-ID>}"
    tput setaf 1; echo $ $0 "search: {search through the available images at Docker hub}"
    tput setaf 1; echo $ $0 "pull: {pull an image from the Docker Hub )}"
    tput setaf 1; echo $ $0 "images: {check the available docker images on your system}"
    tput setaf 1; echo $ $0 "run: {run an image}"
    tput setaf 1; echo $ $0 "containers: {list all running containers}"
    tput setaf 1; echo $ $0 "build: {build a container}"
    tput setaf 1; echo $ $0 "delete: {delete a container)}"

    ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}
