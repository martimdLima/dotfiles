# +-------------------+
# | System Functions  |
# +-------------------+

# Menu for shutting down, rebooting or suspending the system
sys() {
ERROR=0
case "$1" in
    stop)
        echo $"Shutting Down System"
        systemctl poweroff
        ;;
    reboot)
    echo $"Rebooting the System"
        systemctl reboot
        ;;
    suspend)
    echo $"Suspending System"
        systemctl suspend
        ;;

 *)
    echo $"Usage: $0 {stop|reboot|suspend}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}

# Menu with various options to update the System
sysupdt() {
ERROR=0
case "$1" in
    mir)
        sudo pacman-mirrors -c all
    ;;
    mirapp)
        su -
        pacman-mirrors -f 5 && pacman -Syyu
    ;;
    pacsyu)
        sudo pacman -Syu
    ;;
    pacsyyu)
        sudo pacman -Syyu
    ;;
    yaysua)
        yay -Sua --noconfirm
    ;;
    yaysyu)
        yay -Syu --noconfirm
    ;;
    parsua)
        paru -Sua --noconfirm
    ;;
    parsyu)
        paru -Syu --noconfirm
    ;;
    unlock)
        sudo rm /var/lib/pacman/db.lck
    ;;
    cleanup)
        sudo pacman -Rns $(pacman -Qtdq)
    ;;
 *)
    echo $"Usage: $0 {mir|mirapp|pacsyu|pacsyyu|yaysua|yaysyu|parsua|parsyu|unlock|cleanup}"
    tput setaf 1; echo $"$0 mir: {update mirror list}"
    tput setaf 1; echo $"$0 mirapp: {update mirror list and perform system update}"
    tput setaf 1; echo $"$0 pacsyu: {update only standard pkgs}"
    tput setaf 1; echo $"$0 pacsyyu: {Refresh pkglist & update standard pkgs}"
    tput setaf 1; echo $"$0 yaysua:{update only AUR pkgs (yay)}"
    tput setaf 1; echo $"$0 yaysyu: {update standard pkgs and AUR pkgs (yay)}"
    tput setaf 1; echo $"$0 parsua: {update only AUR pkgs (paru)}"
    tput setaf 1; echo $"$0 parsyu: {update standard pkgs and AUR pkgs (paru)}"
    tput setaf 1; echo $"$0 unlock: {remove pacman lock}"
    tput setaf 1; echo $"$0 cleanup: {remove orphaned packages}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}


# Generate SSH key
ssh-create() {
if [ ! -z "$1" ];
then
    ssh-keygen -f $HOME/.ssh/$1 -t rsa -N '' -C "$1"
    chmod 700 $HOME/.ssh/$1*
fi
}

function start_agent {
    echo "Initializing new SSH agent..."
    # spawn ssh-agent
    ssh-agent | sed 's/^echo/#echo/' > "$SSH_ENV"
    echo succeeded
    chmod 600 "$SSH_ENV"
    . "$SSH_ENV" > /dev/null
    ssh-add
}

function init_ssh_agent() {
    # check for running ssh-agent with proper $SSH_AGENT_PID
    if [ -n "$SSH_AGENT_PID" ]; then
        ps -ef | grep "$SSH_AGENT_PID" | grep ssh-agent > /dev/null
        if [ $? -eq 0 ]; then
      test_identities
        fi
    # if $SSH_AGENT_PID is not properly set, we might be able to load one from
    # $SSH_ENV
    else
        if [ -f "$SSH_ENV" ]; then
      . "$SSH_ENV" > /dev/null
        fi
        ps -ef | grep "$SSH_AGENT_PID" | grep ssh-agent > /dev/null
        if [ $? -eq 0 ]; then
            test_identities
        else
            start_agent
        fi
    fi
}

# test for identities
function test_identities {
    # test whether standard identities have been added to the agent already
    ssh-add -l | grep "The agent has no identities" > /dev/null
    if [ $? -eq 0 ]; then
        ssh-add
        # $SSH_AUTH_SOCK broken so we start a new proper agent
        if [ $? -eq 2 ];then
            start_agent
        fi
    fi
}

# Command History
historystat() {
    history 0 | awk '{print $2}' | sort | uniq -c | sort -n -r | head
}

# +---------+
# | Display |
# +---------+

# Get Screen Resolution
screenres() {
    xrandr --current | grep '*' | awk '{print $1}'
}

setDual() {
    xlayoutdisplay -p DP-2 -o DP-2 -o DP-3 -o
}

setTrip() {
    xlayoutdisplay -p DP-2 -o DP-2 -o DP-3 -o HDMI-0
}

# +----------------+
# | Network        |
# +----------------+

prts() {
ERROR=0
case "$1" in
    a)
    sudo lsof -i -P -n | grep LISTEN
        ;;
    p)
    sudo lsof -i:${2}
    ;;
    ip)
    sudo nmap -sTU -O ${2}
    ;;
 *)
    echo $"Usage: $0 {a|p|ip}"
    tput setaf 1; echo $ $0 "a: {displays all ports that are in use}}"
    tput setaf 1; echo $ $0 "p: {displays the services that are using the port specified by the user}"
    tput setaf 1; echo $ $0 "ip: {displays all ports that are in use for the specified ip address by the user}"
    ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}

# +----------------+
# | Utils          |
# +----------------+

# Screenshot
screenshot () {
    local DIR="${HOME}/Documents/images/screenshots"
    local DATE="$(date +%Y%m%d-%H%M%S)"
    local NAME="${DIR}/screenshot-${DATE}.png"
    local LOG="${DIR}/screenshots.log"

    # Check if the dir to store the screenshots exists, else create it:
    if [ ! -d "${DIR}" ]; then mkdir -p "${DIR}"; fi

    if [ ! -f "${LOG}" ]; then touch "${LOG}"; fi

    # Screenshot a selected window
    if [ "$1" = "win" ]; then import -format png "${NAME}"; fi

    # Screenshot the entire screen
    if [ "$1" = "scr" ]; then import -format png -window root "${NAME}"; fi

    # Screenshot a selected area if [ "$1" = "area" ]; then import -format png "${NAME}"; fi

    if [[ $# = 0 ]]; then
        # Display a warning if no area defined
        echo "No screenshot area has been specified. Please choose between: win, scr, area. Screenshot not taken."
        echo "${DATE}: No screenshot area has been defined. Screenshot not taken." >> "${LOG}"
    else
        # Save the screenshot in the directory and edit the log
        echo "${NAME}" >> "${LOG}"
    fi
}

# Screensaver [Matrix]
matrix () {
    local lines=$(tput lines)
    cols=$(tput cols)

    awkscript='
    {
        letters="abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789@#$%^&*()"
        lines=$1
        random_col=$3
        c=$4
        letter=substr(letters,c,1)
        cols[random_col]=0;
        for (col in cols) {
            line=cols[col];
            cols[col]=cols[col]+1;
            printf "\033[%s;%sH\033[2;32m%s", line, col, letter;
            printf "\033[%s;%sH\033[1;37m%s\033[0;0H", cols[col], col, letter;
            if (cols[col] >= lines) {
                cols[col]=0;
            }
    }
}
'

echo -e "\e[1;40m"
clear

while :; do
    echo $lines $cols $(( $RANDOM % $cols)) $(( $RANDOM % 72 ))
    sleep 0.05
done | awk "$awkscript"
}

# Generate a random alphabetic, numeric or alpha-numeric String

genrand() {
    LENGTH=48

    if [ -n "$2" ]
    then
        LENGTH="${2}"
    fi

    ERROR=0
    case "$1" in
        aul)
            cat /dev/urandom | tr -dc 'a-zA-Z' | fold -w ${LENGTH} | head -n 1
            ;;
        au)
            cat /dev/urandom | tr -dc 'A-Z' | fold -w ${LENGTH} | head -n 1
            ;;
        al)
            cat /dev/urandom | tr -dc 'a-z' | fold -w ${LENGTH} | head -n 1
            ;;
        n)
            cat /dev/urandom | tr -dc '0-9' | fold -w ${LENGTH} | head -n 1
            ;;           
        anul)
            cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w ${LENGTH} | head -n 1
            ;;
        anu)
            cat /dev/urandom | tr -dc 'A-Z0-9' | fold -w ${LENGTH} | head -n 1
            ;;
        anl)
            cat /dev/urandom | tr -dc 'a-z0-9' | fold -w ${LENGTH} | head -n 1
            ;;
     *)
        echo $"Usage: $0 {au|al|n|anul|anu|anl}"
        echo $"Usage: $0 {Length can be defined by providing aditional int arg}"
        tput setaf 1; echo $ $0 "aul: {generates a random alphabetic string with upper and lower characters}"
        tput setaf 1; echo $ $0 "au: {generates a random alphabetic string with upper characters}"
        tput setaf 1; echo $ $0 "al: {generates a random alphabetic string with lower characters}"
        tput setaf 1; echo $ $0 "n: {generates a random numeric string}"
        tput setaf 1; echo $ $0 "anul: {generates a random alpha-numeric string with upper and lower characters}"
        tput setaf 1; echo $ $0 "anu: {generates a random alpha-numeric string with upper characters}"
        tput setaf 1; echo $ $0 "anl: {generates a random alpha-numeric string with lower characters}"
        ;;
    esac

    if [ $ERROR -gt 1 ]
    then
        echo $ERROR
    fi
}

# +--------------------+
# | Directory Creation |
# +--------------------+

# Makes a directory with the given name and cd's into it
mkcd() {
    dir="$*";
    mkdir -p "$dir" && cd "$dir";
}

# Copies the choosen directory and makes another one with the given name
# and the same content
mkcp() {
    dir="$2"
    tmp="$2"; tmp="${tmp: -1}"
    [ "$tmp" != "/" ] && dir="$(dirname "$2")"
    [ -d "$dir" ] ||
    mkdir -p "$dir" &&
    cp -r "$@"
}

# Moves the current directory and its content and makes
# another one with the given name
mkmv() {
    dir="$2"
    tmp="$2"; tmp="${tmp: -1}"
    [ "$tmp" != "/" ] && dir="$(dirname "$2")"
    [ -d "$dir" ] ||
    mkdir -p "$dir" &&
    mv "$@"
}

# +-----------------------------+
# | File Extraction/Compression |
# +-----------------------------+

# Extraction
extract() {
    if [ -f $1 ] ; then
        ex $1
    else
        echo "'$1' is not a valid file"
    fi
}

mkextract() {
    for file in "$@"
    do
        if [ -f $file ] ; then
            local filename=${file%\.*}
            mkdir -p $filename
            cp $file $filename
            cd $filename
            ex $file
            rm -f $file
            cd -
        else
            echo "'$1' is not a valid file"
        fi
    done
}

ex() {
    case $1 in
        *.tar.bz2)  tar xjf $1      ;;
        *.tar.gz)   tar xzf $1      ;;
        *.bz2)      bunzip2 $1      ;;
        *.gz)       gunzip $1       ;;
        *.tar)      tar xf $1       ;;
        *.tbz2)     tar xjf $1      ;;
        *.tgz)      tar xzf $1      ;;
        *.zip)      unzip $1        ;;
        *.7z)       7z x $1         ;; # require p7zip
        *.rar)      7z x $1         ;; # require p7zip
        *.iso)      7z x $1         ;; # require p7zip
        *.Z)        uncompress $1   ;;
        *)          echo "'$1' cannot be extracted" ;;
    esac
}

# Compression
compress() {
    tar cvzf $1.tar.gz $1
}

function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh;
    else
        local arg=-sh;
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@";
    else
        du $arg .[^.]* ./*;
    fi;
}

# +-----------------------------+
# | Image Edition               |
# +-----------------------------+

# Get the selected img size
imgsize() {
    local width=$(identify -format "%w" "$1")> /dev/null
    local height=$(identify -format "%h" "$1")> /dev/null

    echo -e "Size of $1: $width*$height"
}

# Resize the selected img
imgresize() {
    local filename=${1%\.*}
    local extension="${1##*.}"
    local separator="_"
    if [ ! -z $3 ]; then
        local finalName="$filename.$extension"
    else
        local finalName="$filename$separator$2.$extension"
    fi
    convert $1 -quality 100 -resize $2 $finalName
    echo "$finalName resized to $2"
}

# Resize imgs in batch
imgresizeall() {
    for f in *.${1}; do
        if [ ! -z $3 ]; then
            imgresize "$f" ${2} t
        else
            imgresize "$f" ${2}
        fi
    done
}

# Optimize img
imgoptimize() {
    local filename=${1%\.*}
    local extension="${1##*.}"
    local separator="_"
    local suffix="optimized"
    local finalName="$filename$separator$suffix.$extension"
    convert $1 -strip -interlace Plane -quality 85% $finalName
    echo "$finalName created"
}

Imgoptimize() {
    local filename=${1%\.*}
    local extension="${1##*.}"
    local separator="_"
    local suffix="optimized"
    local convert $1 -strip -interlace Plane -quality 85% $1
    echo "$1 created"
}

# Optmize imgs in batch
imgoptimizeall() {
    for f in *.${1}; do
        imgoptimize "$f"
    done
}

Imgoptimizeall() {
    for f in *.${1}; do
        Imgoptimize "$f"
    done
}

# Conver img to jpg
imgconvjpg() {
    if [ ! -z "$1" ];
    then
        local filename=${1%\.*}
        magick convert $1 "${filename}.jpg"
    else
        echo -e "You need to add an image to convert as param!"
    fi
}

# Conver img to png
imgconvpng() {
    if [ ! -z "$1" ];
    then
        local filename=${1%\.*}
        magick convert $1 "${filename}.png"
    else
        echo -e "You need to add an image to convert as param!"
    fi
}

# Convert img to webp
imgwebp() {
    local IMG_EXT="jpg"
    if [ ! -z $1 ];
    then
        IMG_EXT=$1
    fi
    for F in *.$IMG_EXT; do cwebp -q 100 $F -o `basename ${F%.$IMG_EXT}`.webp; done
}

sort_by_aspect_ratio() {
    for image in *.jpg *.png;
    do res=$(identify -format "%wx%h\\n" $image)
        mkdir -p $res;
        mv $image $res;
        #echo $res
    done
}

# +----------------+
# | Media          |
# +----------------+

# This function turns a video into gif.
## args - $1 - file path

gifify() {
  if [[ -n "$1" ]]; then
    if [[ $2 == '--good' ]]; then
      ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
      time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > "$1.gif"
      rm out-static*.png
    else
      ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$1.gif"
    fi
  else
    echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# This function turns a video into webm.
## args - $1 - file path

webmify(){
    ffmpeg -i "$1" -vcodec libvpx -acodec libvorbis -isync -copyts -aq 80 -threads 3 -qmax 30 -y "$2" "$1.webm"
}

# This function enables the user to open youtube links directly in the shell on the prefered media player

## args - $1 - function option
### sh) $2 - search term; 
### ch), pl) $2 - selected channel from list; 
### rc) $2 - number of recents videos to display

ytv() {
ERROR=0
case "$1" in
    sh)
        cat /home/mdlima/.config/zsh/ytchannelslist.txt | sed -n "${2},${2}p" | awk -F "|" '{print $2}' | xargs youtube-viewer --login -sc
        ;;
    ch)
        cat /home/mdlima/.config/zsh/ytchannelslist.txt | sed -n "${2},${2}p" | awk -F "|" '{print $3}' | xargs youtube-viewer --login -uv
        ;;
    pl)
        cat /home/mdlima/.config/zsh/ytchannelslist.txt | sed -n "${2},${2}p" | awk -F "|" '{print $3}' | xargs youtube-viewer --login -up
        ;;
    rc)
        youtube-viewer --login -SV -results="${2}"
        ;;
    schls)
        cat /home/mdlima/.config/zsh/ytchannelslist.txt | awk -F "|" '{print NR " - " $2 " - " $3}' | grep "${2}"
        ;;
    chls)
       tput setaf 1; cat /home/mdlima/.config/zsh/ytchannelslist.txt | awk -F "|" '{print NR " - " $2 " - " $3}'
      ;;
 *)
    echo $"Usage: $0 {ch|pl|rc|schls|chls}"
    echo $"Usage: $0 {Provide an int arg to the first three options, use chls or schls to search through the args}"
    tput setaf 1; echo $ $0 "sh: {Search channels}"
    tput setaf 1; echo $ $0 "ch: {Display Videos from the choosen channel}"
    tput setaf 1; echo $ $0 "pl: {Display playlists from the choosen channel)}"
    tput setaf 1; echo $ $0 "rc: {Display the choosen amount of recent videos(limit 50!)}"
    tput setaf 1; echo $ $0 "schls: {Search my youtube video list}"
    tput setaf 1; echo $ $0 "chls: {display my youtube video list (large list!)}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}


# This function enables the user to download video, audio or playlists from youtube

## video & playlist - $1 - function option; $2 - download link; $3 - 
## audio - $1 - function option; $2 - audio quality option; $3 . download link

ytdw() {
    ERROR=0
    case "$1" in
        single)
            if [ ! -z $2 ];
            then
                youtube-dl -f 22 "$2"
            else
                echo "You need to specify a video url as argument"
            fi
            ;;
        playlist)
            if [ ! -z $2 ];
            then
                youtube-dl -o "%(autonumber)s-%(title)s.%(ext)s" "$2"
            else
                echo "You need to specify a playlist url as argument"
            fi
            ;;
        audio)
            ERROR=0
            case "$2" in
                best)
                    youtube-dl --extract-audio --audio-format aac "$3"
                    ;;
                aac)
                    youtube-dl --extract-audio --audio-format aac "$3"
                    ;;
                flac)
                    youtube-dl --extract-audio --audio-format aac "$3"
                    ;;
                m4a)
                    youtube-dl --extract-audio --audio-format aac "$3"
                    ;;
                mp3)
                    youtube-dl --extract-audio --audio-format aac "$3"
                    ;;
                opus)
                    youtube-dl --extract-audio --audio-format aac "$3"
                    ;;
                vorbis)
                    youtube-dl --extract-audio --audio-format aac "$3"
                    ;;
                wav)
                    youtube-dl --extract-audio --audio-format aac "$3"
                    ;;
             *)
                echo $"youtube-dl: $0 {best|aac|flac|m4a|mp3|opus|vorbis|wav}"
                echo $"Usage: $0 {Please provide a link after the choosen option}"
             ;;
            esac

            if [ $ERROR -gt 1 ]
            then
                echo $ERROR
            fi
            ;;
     *)
        echo $"Usage: $0 {ch|pl|rc|schls|chls}"
        echo $"Usage: $0 {Provide an int arg to the first three options, use chls or schls to search through the args}"
        tput setaf 1; echo $ $0 "single: {Search channels}"
        tput setaf 1; echo $ $0 "playlist: {Display Videos from the choosen channel}"
        tput setaf 1; echo $ $0 "audio: {Display playlists from the choosen channel)}"
     ;;
    esac

    if [ $ERROR -gt 1 ]
    then
        echo $ERROR
    fi
}

genytlist() {
    
    # Creates temporary file
    touch /home/mdlima/.config/zsh/ytchannelslisttemp.txt

    # Parses yt_test.csv containing youtube channels list; 
    # Removes first line; replaces ',' with '|'; numbers all lines and appends an '|' to the end; finally saves it in '/home/mdlima/.config/zsh/ytchannelslisttemp.txt'
    csvcut -c 1,5 /home/mdlima/Downloads/yt_test.csv | tail -n +2 | sed 's/,/ | /g' | nl -w2 -s' | ' | sed 's/^[ \t]*//' > /home/mdlima/.config/zsh/ytchannelslisttemp.txt

        # In the case the channels list file already exists, remove it and create it again, otherwise create the file    
        if [ -f "/home/mdlima/.config/zsh/ytchannelslist.txt" ];
        then
            rm -rf /home/mdlima/.config/zsh/ytchannelslist.txt
            touch /home/mdlima/.config/zsh/ytchannelslist.txt
        else
            touch /home/mdlima/.config/zsh/ytchannelslist.txt
        fi

    # Loop through the temporary file
    while IFS= read -r line; do

        # parse the data
        LINENUM=$(echo $line | cut -d'|' -f 1)
        NAME=$(echo $line | cut -d'|' -f 2) 
        CHANNELID=$(echo $line | cut -d'|' -f 3 | sed 's:.*/::') # this regex is to grep all the content of the channel url after the last '/'

        FLINE=$(echo $LINENUM "|" $NAME "|" $CHANNELID) 

        $(echo $FLINE | sed 's/[ ][ ]*/ /g' >> "/home/mdlima/.config/zsh/ytchannelslist.txt")

    done < "/home/mdlima/.config/zsh/ytchannelslisttemp.txt"

    rm -rf /home/mdlima/.config/zsh/ytchannelslisttemp.txt
}

# +----------------+
# | Apps           |
# +----------------+

# MariaDB

mdb() {
ERROR=0
case "$1" in
    start)
        echo $"Maria DB service starting"
        systemctl start mariadb
        ;;
    stop)
        echo $"Maria DB service stoping"
        systemctl stop mariadb
        ;;
    restart)
    echo $"MariaDB Service restarting"
    systemctl restart mariadb
        ;;
    status)
    echo $"MariaDB Service Status"
    systemctl status mariadb
        ;;

 *)
    echo $"MariaDB: $0 {start|stop|restarting|status}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}

# Tomcat

tc() {
ERROR=0
case "$1" in
    start)
        echo $"Starting Tomcat"
        sudo sh $CATALINA_HOME/bin/startup.sh
        ;;
    stop)
        echo $"Stopping Tomcat"
        sudo sh $CATALINA_HOME/bin/shutdown.sh
        ;;
    restart)
        sudo sh $CATALINA_HOME/bin/shutdown.sh
        sudo sh $CATALINA_HOME/bin/startup.sh
        ;;

    logs)
        sudo tail -f $CATALINA_HOME/logs/catalina.out
        ;;
 *)
    echo $"Tomcat: $0 {start|stop|restart|logs}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}

# Doom Emacs

doom() {
ERROR=0
case "$1" in
    sync)
        ~/.emacs.d/bin/doom sync
        ;;
    upgrade)
        ~/.emacs.d/bin/doom upgrade
        ;;
    doctor)
        ~/.emacs.d/bin/doom doctor
        ;;
    env)
        ~/.emacs.d/bin/doom env
        ;;
    build)
        ~/.emacs.d/bin/doom build
        ;;
 *)
    echo $"Usage: $0 {sync, upgrade, doctor, env, build}"
    tput setaf 1; echo $"$0 sync: {synchronize your private config with Doom}"
    tput setaf 1; echo $"$0 upgrade: {update Doom to the latest release & all installed packages}"
    tput setaf 1; echo $"$0 doctor:{diagnose common issues with your system and config}"
    tput setaf 1; echo $"$0 env: {dump a snapshot of your shell environment to a file that Doom will load at startup}"
    tput setaf 1; echo $"$0 build: {recompile all installed packages}"
 ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}

# Docker

dkr() {
ERROR=0
case "$1" in
    version)
        docker version
        ;;
    info)
        docker info
        ;;
    logs)
        docker container logs
        ;;
    procs)
        docker container top ${2}
        ;;
    search)
        docker search ${2}
        ;;
    pull)
        docker pull ${2}
        ;;
    list)
       docker container ls
      ;;
    images)
        docker images
        ;;
    run)
        docker run -d ${2}
        ;;
    stop)
        docker stop ${2}
        ;;
    build)
        docker build ${2}
        ;;
    rmv)
       docker container rm ${2}
     ;;
 *)
    echo $"Usage: $0 {search|pull|images|run|containers|build|delete}"
    echo $"Usage: $0 {For search|pull|run provide an <image-name>}"
    echo $"Usage: $0 {For build provide an <dockerfile-location>}"
    echo $"Usage: $0 {For delete provide an <container-ID>}"
    tput setaf 1; echo $ $0 "version: {displays the version of both server and client}}"
    tput setaf 1; echo $ $0 "info: {displays a detailed list of informations about the server and client}"
    tput setaf 1; echo $ $0 "search: {search through the available images at Docker hub}"
    tput setaf 1; echo $ $0 "pull: {pull an image from the Docker Hub )}"
    tput setaf 1; echo $ $0 "images: {check the available docker images on your system}"
    tput setaf 1; echo $ $0 "run: {run an image}"
    tput setaf 1; echo $ $0 "containers: {list all running containers}"
    tput setaf 1; echo $ $0 "build: {build a container}"
    tput setaf 1; echo $ $0 "delete: {delete a container)}"

    ;;
esac

if [ $ERROR -gt 1 ]
then
    echo $ERROR
fi
}

# IntelliJ

renewKey() {
  rm -rf ~/.config/JetBrains/IntelliJIdea2021.1/eval
  rm -rf ~/.config/JetBrains/IntelliJIdea2021.1/options/other.xml
  rm -rf ~/.local/share/JetBrains/consentOptions
  rm -rf ~/.java/.userPrefs
}

init_tmux() {
    if which tmux 2>&1 >/dev/null; then
      if [ $TERM != "screen-256color" ] && [  $TERM != "screen" ]; then
        tmux attach -t TMUX || tmux new -s TMUX; exit
      fi
    fi
}

init_p10k() {
    if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
      source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
    fi

    # Silences console output during initialization if detected
    #typeset -g POWERLEVEL9K_INSTANT_PROMPT=quiet
}

init_nvm() {
    export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh" # This loads nvm

    autoload -U add-zsh-hook
    load-nvmrc() {
      local node_version="$(nvm version)"
      local nvmrc_path="$(nvm_find_nvmrc)"

      if [ -n "$nvmrc_path" ]; then
        local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

        if [ "$nvmrc_node_version" = "N/A" ]; then
          nvm install
        elif [ "$nvmrc_node_version" != "$node_version" ]; then
          nvm use
        fi
      elif [ "$node_version" != "$(nvm version default)" ]; then
        echo "Reverting to nvm default version"
        nvm use default
      fi
    }
    add-zsh-hook chpwd load-nvmrc
    load-nvmrc
}
